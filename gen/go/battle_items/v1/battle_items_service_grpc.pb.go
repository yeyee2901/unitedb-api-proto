// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: battle_items/v1/battle_items_service.proto

package battlepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BattleItemServiceClient is the client API for BattleItemService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BattleItemServiceClient interface {
	GetBattleItem(ctx context.Context, in *GetBattleItemRequest, opts ...grpc.CallOption) (*GetBattleItemResponse, error)
}

type battleItemServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBattleItemServiceClient(cc grpc.ClientConnInterface) BattleItemServiceClient {
	return &battleItemServiceClient{cc}
}

func (c *battleItemServiceClient) GetBattleItem(ctx context.Context, in *GetBattleItemRequest, opts ...grpc.CallOption) (*GetBattleItemResponse, error) {
	out := new(GetBattleItemResponse)
	err := c.cc.Invoke(ctx, "/battle_items.v1.BattleItemService/GetBattleItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BattleItemServiceServer is the server API for BattleItemService service.
// All implementations should embed UnimplementedBattleItemServiceServer
// for forward compatibility
type BattleItemServiceServer interface {
	GetBattleItem(context.Context, *GetBattleItemRequest) (*GetBattleItemResponse, error)
}

// UnimplementedBattleItemServiceServer should be embedded to have forward compatible implementations.
type UnimplementedBattleItemServiceServer struct {
}

func (UnimplementedBattleItemServiceServer) GetBattleItem(context.Context, *GetBattleItemRequest) (*GetBattleItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBattleItem not implemented")
}

// UnsafeBattleItemServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BattleItemServiceServer will
// result in compilation errors.
type UnsafeBattleItemServiceServer interface {
	mustEmbedUnimplementedBattleItemServiceServer()
}

func RegisterBattleItemServiceServer(s grpc.ServiceRegistrar, srv BattleItemServiceServer) {
	s.RegisterService(&BattleItemService_ServiceDesc, srv)
}

func _BattleItemService_GetBattleItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBattleItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BattleItemServiceServer).GetBattleItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/battle_items.v1.BattleItemService/GetBattleItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BattleItemServiceServer).GetBattleItem(ctx, req.(*GetBattleItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BattleItemService_ServiceDesc is the grpc.ServiceDesc for BattleItemService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BattleItemService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "battle_items.v1.BattleItemService",
	HandlerType: (*BattleItemServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBattleItem",
			Handler:    _BattleItemService_GetBattleItem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "battle_items/v1/battle_items_service.proto",
}
